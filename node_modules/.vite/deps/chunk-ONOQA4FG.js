import {
  CalendarOrClockPicker,
  DatePickerToolbar,
  KeyboardDateInput,
  PickersActionBar,
  WrapperVariantContext,
  datePickerValueManager,
  getDisplayDate,
  onSpaceOrEnter,
  useDatePickerDefaultizedProps,
  useDateValidation,
  usePickerState
} from "./chunk-AKYZB4ZZ.js";
import {
  DIALOG_WIDTH,
  DialogContent_default,
  Dialog_default,
  Popper_default,
  dialogClasses_default,
  useLocaleText,
  useMediaQuery,
  useUtils
} from "./chunk-GDV4MIEW.js";
import {
  init_utils,
  useEventCallback_default
} from "./chunk-Y6CQRYHR.js";
import {
  Grow_default
} from "./chunk-EJGCUVI3.js";
import {
  ownerDocument_default,
  useForkRef_default
} from "./chunk-LVHAMJCG.js";
import {
  Paper_default
} from "./chunk-S47N2AZF.js";
import {
  TrapFocus_default,
  _extends,
  _objectWithoutPropertiesLoose,
  init_TrapFocus,
  init_extends,
  init_objectWithoutPropertiesLoose,
  require_prop_types,
  styled_default,
  useThemeProps2 as useThemeProps
} from "./chunk-2DF7DZAV.js";
import {
  require_jsx_runtime
} from "./chunk-D2LIDDPY.js";
import {
  require_react
} from "./chunk-IGOAJGOA.js";
import {
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/@mui/x-date-pickers/DesktopDatePicker/DesktopDatePicker.js
init_extends();
init_objectWithoutPropertiesLoose();
var React3 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/@mui/x-date-pickers/internals/components/wrappers/DesktopWrapper.js
init_extends();
var React2 = __toESM(require_react());
init_utils();

// node_modules/@mui/x-date-pickers/internals/components/PickersPopper.js
init_objectWithoutPropertiesLoose();
init_extends();
var React = __toESM(require_react());

// node_modules/@mui/material/Unstable_TrapFocus/index.js
init_TrapFocus();

// node_modules/@mui/x-date-pickers/internals/components/PickersPopper.js
init_utils();
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var _excluded = ["onClick", "onTouchStart"];
var PickersPopperRoot = styled_default(Popper_default)(({
  theme
}) => ({
  zIndex: theme.zIndex.modal
}));
var PickersPopperPaper = styled_default(Paper_default)(({
  ownerState
}) => _extends({
  transformOrigin: "top center",
  outline: 0
}, ownerState.placement === "top" && {
  transformOrigin: "bottom center"
}));
function clickedRootScrollbar(event, doc) {
  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
}
function useClickAwayListener(active, onClickAway) {
  const movedRef = React.useRef(false);
  const syntheticEventRef = React.useRef(false);
  const nodeRef = React.useRef(null);
  const activatedRef = React.useRef(false);
  React.useEffect(() => {
    if (!active) {
      return void 0;
    }
    function armClickAwayListener() {
      activatedRef.current = true;
    }
    document.addEventListener("mousedown", armClickAwayListener, true);
    document.addEventListener("touchstart", armClickAwayListener, true);
    return () => {
      document.removeEventListener("mousedown", armClickAwayListener, true);
      document.removeEventListener("touchstart", armClickAwayListener, true);
      activatedRef.current = false;
    };
  }, [active]);
  const handleClickAway = useEventCallback_default((event) => {
    if (!activatedRef.current) {
      return;
    }
    const insideReactTree = syntheticEventRef.current;
    syntheticEventRef.current = false;
    const doc = ownerDocument_default(nodeRef.current);
    if (!nodeRef.current || "clientX" in event && clickedRootScrollbar(event, doc)) {
      return;
    }
    if (movedRef.current) {
      movedRef.current = false;
      return;
    }
    let insideDOM;
    if (event.composedPath) {
      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
    } else {
      insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);
    }
    if (!insideDOM && !insideReactTree) {
      onClickAway(event);
    }
  });
  const handleSynthetic = () => {
    syntheticEventRef.current = true;
  };
  React.useEffect(() => {
    if (active) {
      const doc = ownerDocument_default(nodeRef.current);
      const handleTouchMove = () => {
        movedRef.current = true;
      };
      doc.addEventListener("touchstart", handleClickAway);
      doc.addEventListener("touchmove", handleTouchMove);
      return () => {
        doc.removeEventListener("touchstart", handleClickAway);
        doc.removeEventListener("touchmove", handleTouchMove);
      };
    }
    return void 0;
  }, [active, handleClickAway]);
  React.useEffect(() => {
    if (active) {
      const doc = ownerDocument_default(nodeRef.current);
      doc.addEventListener("click", handleClickAway);
      return () => {
        doc.removeEventListener("click", handleClickAway);
        syntheticEventRef.current = false;
      };
    }
    return void 0;
  }, [active, handleClickAway]);
  return [nodeRef, handleSynthetic, handleSynthetic];
}
var PickersPopper = (props) => {
  var _components$ActionBar;
  const {
    anchorEl,
    children,
    containerRef = null,
    onBlur,
    onClose,
    onClear,
    onAccept,
    onCancel,
    onSetToday,
    open,
    PopperProps,
    role,
    TransitionComponent = Grow_default,
    TrapFocusProps,
    PaperProps = {},
    components,
    componentsProps
  } = props;
  React.useEffect(() => {
    function handleKeyDown2(nativeEvent) {
      if (open && (nativeEvent.key === "Escape" || nativeEvent.key === "Esc")) {
        onClose();
      }
    }
    document.addEventListener("keydown", handleKeyDown2);
    return () => {
      document.removeEventListener("keydown", handleKeyDown2);
    };
  }, [onClose, open]);
  const lastFocusedElementRef = React.useRef(null);
  React.useEffect(() => {
    if (role === "tooltip") {
      return;
    }
    if (open) {
      lastFocusedElementRef.current = document.activeElement;
    } else if (lastFocusedElementRef.current && lastFocusedElementRef.current instanceof HTMLElement) {
      lastFocusedElementRef.current.focus();
    }
  }, [open, role]);
  const [clickAwayRef, onPaperClick, onPaperTouchStart] = useClickAwayListener(open, onBlur != null ? onBlur : onClose);
  const paperRef = React.useRef(null);
  const handleRef = useForkRef_default(paperRef, containerRef);
  const handlePaperRef = useForkRef_default(handleRef, clickAwayRef);
  const ownerState = props;
  const {
    onClick: onPaperClickProp,
    onTouchStart: onPaperTouchStartProp
  } = PaperProps, otherPaperProps = _objectWithoutPropertiesLoose(PaperProps, _excluded);
  const handleKeyDown = (event) => {
    if (event.key === "Escape") {
      event.stopPropagation();
      onClose();
    }
  };
  const ActionBar = (_components$ActionBar = components == null ? void 0 : components.ActionBar) != null ? _components$ActionBar : PickersActionBar;
  return (0, import_jsx_runtime.jsx)(PickersPopperRoot, _extends({
    transition: true,
    role,
    open,
    anchorEl,
    ownerState,
    onKeyDown: handleKeyDown
  }, PopperProps, {
    children: ({
      TransitionProps,
      placement
    }) => (0, import_jsx_runtime.jsx)(TrapFocus_default, _extends({
      open,
      disableAutoFocus: true,
      disableEnforceFocus: role === "tooltip",
      isEnabled: () => true
    }, TrapFocusProps, {
      children: (0, import_jsx_runtime.jsx)(TransitionComponent, _extends({}, TransitionProps, {
        children: (0, import_jsx_runtime2.jsxs)(PickersPopperPaper, _extends({
          tabIndex: -1,
          elevation: 8,
          ref: handlePaperRef,
          onClick: (event) => {
            onPaperClick(event);
            if (onPaperClickProp) {
              onPaperClickProp(event);
            }
          },
          onTouchStart: (event) => {
            onPaperTouchStart(event);
            if (onPaperTouchStartProp) {
              onPaperTouchStartProp(event);
            }
          },
          ownerState: _extends({}, ownerState, {
            placement
          })
        }, otherPaperProps, {
          children: [children, (0, import_jsx_runtime.jsx)(ActionBar, _extends({
            onAccept,
            onClear,
            onCancel,
            onSetToday,
            actions: []
          }, componentsProps == null ? void 0 : componentsProps.actionBar))]
        }))
      }))
    }))
  }));
};

// node_modules/@mui/x-date-pickers/internals/components/wrappers/DesktopWrapper.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
function DesktopWrapper(props) {
  const {
    children,
    DateInputProps,
    KeyboardDateInputComponent,
    onClear,
    onDismiss,
    onCancel,
    onAccept,
    onSetToday,
    open,
    PopperProps,
    PaperProps,
    TransitionComponent,
    components,
    componentsProps
  } = props;
  const ownInputRef = React2.useRef(null);
  const inputRef = useForkRef_default(DateInputProps.inputRef, ownInputRef);
  return (0, import_jsx_runtime4.jsxs)(WrapperVariantContext.Provider, {
    value: "desktop",
    children: [(0, import_jsx_runtime3.jsx)(KeyboardDateInputComponent, _extends({}, DateInputProps, {
      inputRef
    })), (0, import_jsx_runtime3.jsx)(PickersPopper, {
      role: "dialog",
      open,
      anchorEl: ownInputRef.current,
      TransitionComponent,
      PopperProps,
      PaperProps,
      onClose: onDismiss,
      onCancel,
      onClear,
      onAccept,
      onSetToday,
      components,
      componentsProps,
      children
    })]
  });
}

// node_modules/@mui/x-date-pickers/DesktopDatePicker/DesktopDatePicker.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var _excluded2 = ["onChange", "PopperProps", "PaperProps", "ToolbarComponent", "TransitionComponent", "value", "components", "componentsProps"];
var DesktopDatePicker = React3.forwardRef(function DesktopDatePicker2(inProps, ref) {
  const props = useDatePickerDefaultizedProps(inProps, "MuiDesktopDatePicker");
  const validationError = useDateValidation(props) !== null;
  const {
    pickerProps,
    inputProps,
    wrapperProps
  } = usePickerState(props, datePickerValueManager);
  const {
    PopperProps,
    PaperProps,
    ToolbarComponent = DatePickerToolbar,
    TransitionComponent,
    components,
    componentsProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded2);
  const AllDateInputProps = _extends({}, inputProps, other, {
    components,
    componentsProps,
    ref,
    validationError
  });
  return (0, import_jsx_runtime5.jsx)(DesktopWrapper, _extends({}, wrapperProps, {
    DateInputProps: AllDateInputProps,
    KeyboardDateInputComponent: KeyboardDateInput,
    PopperProps,
    PaperProps,
    TransitionComponent,
    components,
    componentsProps,
    children: (0, import_jsx_runtime5.jsx)(CalendarOrClockPicker, _extends({}, pickerProps, {
      autoFocus: true,
      toolbarTitle: props.label || props.toolbarTitle,
      ToolbarComponent,
      DateInputProps: AllDateInputProps,
      components,
      componentsProps
    }, other))
  }));
});
true ? DesktopDatePicker.propTypes = {
  acceptRegex: import_prop_types.default.instanceOf(RegExp),
  autoFocus: import_prop_types.default.bool,
  children: import_prop_types.default.node,
  className: import_prop_types.default.string,
  closeOnSelect: import_prop_types.default.bool,
  components: import_prop_types.default.object,
  componentsProps: import_prop_types.default.object,
  dayOfWeekFormatter: import_prop_types.default.func,
  defaultCalendarMonth: import_prop_types.default.any,
  disabled: import_prop_types.default.bool,
  disableFuture: import_prop_types.default.bool,
  disableHighlightToday: import_prop_types.default.bool,
  disableMaskedInput: import_prop_types.default.bool,
  disableOpenPicker: import_prop_types.default.bool,
  disablePast: import_prop_types.default.bool,
  getOpenDialogAriaText: import_prop_types.default.func,
  getViewSwitchingButtonText: import_prop_types.default.func,
  ignoreInvalidInputs: import_prop_types.default.bool,
  InputAdornmentProps: import_prop_types.default.object,
  inputFormat: import_prop_types.default.string,
  InputProps: import_prop_types.default.object,
  inputRef: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.shape({
    current: import_prop_types.default.object
  })]),
  label: import_prop_types.default.node,
  leftArrowButtonText: import_prop_types.default.string,
  loading: import_prop_types.default.bool,
  mask: import_prop_types.default.string,
  maxDate: import_prop_types.default.any,
  minDate: import_prop_types.default.any,
  onAccept: import_prop_types.default.func,
  onChange: import_prop_types.default.func.isRequired,
  onClose: import_prop_types.default.func,
  onError: import_prop_types.default.func,
  onMonthChange: import_prop_types.default.func,
  onOpen: import_prop_types.default.func,
  onViewChange: import_prop_types.default.func,
  onYearChange: import_prop_types.default.func,
  open: import_prop_types.default.bool,
  OpenPickerButtonProps: import_prop_types.default.object,
  openTo: import_prop_types.default.oneOf(["day", "month", "year"]),
  orientation: import_prop_types.default.oneOf(["landscape", "portrait"]),
  PaperProps: import_prop_types.default.object,
  PopperProps: import_prop_types.default.object,
  readOnly: import_prop_types.default.bool,
  reduceAnimations: import_prop_types.default.bool,
  renderDay: import_prop_types.default.func,
  renderInput: import_prop_types.default.func.isRequired,
  renderLoading: import_prop_types.default.func,
  rifmFormatter: import_prop_types.default.func,
  rightArrowButtonText: import_prop_types.default.string,
  shouldDisableDate: import_prop_types.default.func,
  shouldDisableMonth: import_prop_types.default.func,
  shouldDisableYear: import_prop_types.default.func,
  showDaysOutsideCurrentMonth: import_prop_types.default.bool,
  showToolbar: import_prop_types.default.bool,
  ToolbarComponent: import_prop_types.default.elementType,
  toolbarFormat: import_prop_types.default.string,
  toolbarPlaceholder: import_prop_types.default.node,
  toolbarTitle: import_prop_types.default.node,
  TransitionComponent: import_prop_types.default.elementType,
  value: import_prop_types.default.any,
  views: import_prop_types.default.arrayOf(import_prop_types.default.oneOf(["day", "month", "year"]).isRequired)
} : void 0;

// node_modules/@mui/x-date-pickers/MobileDatePicker/MobileDatePicker.js
init_extends();
init_objectWithoutPropertiesLoose();
var React7 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());

// node_modules/@mui/x-date-pickers/internals/components/wrappers/MobileWrapper.js
init_extends();
init_objectWithoutPropertiesLoose();
var React5 = __toESM(require_react());

// node_modules/@mui/x-date-pickers/internals/components/PickersModalDialog.js
init_extends();
var React4 = __toESM(require_react());
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var PickersModalDialogRoot = styled_default(Dialog_default)({
  [`& .${dialogClasses_default.container}`]: {
    outline: 0
  },
  [`& .${dialogClasses_default.paper}`]: {
    outline: 0,
    minWidth: DIALOG_WIDTH
  }
});
var PickersModalDialogContent = styled_default(DialogContent_default)({
  "&:first-of-type": {
    padding: 0
  }
});
var PickersModalDialog = (props) => {
  var _components$ActionBar;
  const {
    children,
    DialogProps = {},
    onAccept,
    onClear,
    onDismiss,
    onCancel,
    onSetToday,
    open,
    components,
    componentsProps
  } = props;
  const ActionBar = (_components$ActionBar = components == null ? void 0 : components.ActionBar) != null ? _components$ActionBar : PickersActionBar;
  return (0, import_jsx_runtime7.jsxs)(PickersModalDialogRoot, _extends({
    open,
    onClose: onDismiss
  }, DialogProps, {
    children: [(0, import_jsx_runtime6.jsx)(PickersModalDialogContent, {
      children
    }), (0, import_jsx_runtime6.jsx)(ActionBar, _extends({
      onAccept,
      onClear,
      onCancel,
      onSetToday,
      actions: ["cancel", "accept"]
    }, componentsProps == null ? void 0 : componentsProps.actionBar))]
  }));
};

// node_modules/@mui/x-date-pickers/internals/components/wrappers/MobileWrapper.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var _excluded3 = ["children", "DateInputProps", "DialogProps", "onAccept", "onClear", "onDismiss", "onCancel", "onSetToday", "open", "PureDateInputComponent", "components", "componentsProps"];
function MobileWrapper(props) {
  const {
    children,
    DateInputProps,
    DialogProps,
    onAccept,
    onClear,
    onDismiss,
    onCancel,
    onSetToday,
    open,
    PureDateInputComponent,
    components,
    componentsProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded3);
  return (0, import_jsx_runtime9.jsxs)(WrapperVariantContext.Provider, {
    value: "mobile",
    children: [(0, import_jsx_runtime8.jsx)(PureDateInputComponent, _extends({
      components
    }, other, DateInputProps)), (0, import_jsx_runtime8.jsx)(PickersModalDialog, {
      DialogProps,
      onAccept,
      onClear,
      onDismiss,
      onCancel,
      onSetToday,
      open,
      components,
      componentsProps,
      children
    })]
  });
}

// node_modules/@mui/x-date-pickers/internals/components/PureDateInput.js
init_extends();
var React6 = __toESM(require_react());
var PureDateInput = React6.forwardRef(function PureDateInput2(props, ref) {
  const {
    disabled,
    getOpenDialogAriaText: getOpenDialogAriaTextProp,
    inputFormat,
    InputProps,
    inputRef,
    label,
    openPicker: onOpen,
    rawValue,
    renderInput,
    TextFieldProps = {},
    validationError
  } = props;
  const localeText = useLocaleText();
  const getOpenDialogAriaText = getOpenDialogAriaTextProp != null ? getOpenDialogAriaTextProp : localeText.openDatePickerDialogue;
  const utils = useUtils();
  const PureDateInputProps = React6.useMemo(() => _extends({}, InputProps, {
    readOnly: true
  }), [InputProps]);
  const inputValue = getDisplayDate(utils, rawValue, inputFormat);
  return renderInput(_extends({
    label,
    disabled,
    ref,
    inputRef,
    error: validationError,
    InputProps: PureDateInputProps,
    inputProps: _extends({
      disabled,
      readOnly: true,
      "aria-readonly": true,
      "aria-label": getOpenDialogAriaText(rawValue, utils),
      value: inputValue
    }, !props.readOnly && {
      onClick: onOpen
    }, {
      onKeyDown: onSpaceOrEnter(onOpen)
    })
  }, TextFieldProps));
});

// node_modules/@mui/x-date-pickers/MobileDatePicker/MobileDatePicker.js
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var _excluded4 = ["ToolbarComponent", "value", "onChange", "components", "componentsProps"];
var MobileDatePicker = React7.forwardRef(function MobileDatePicker2(inProps, ref) {
  const props = useDatePickerDefaultizedProps(inProps, "MuiMobileDatePicker");
  const validationError = useDateValidation(props) !== null;
  const {
    pickerProps,
    inputProps,
    wrapperProps
  } = usePickerState(props, datePickerValueManager);
  const {
    ToolbarComponent = DatePickerToolbar,
    components,
    componentsProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded4);
  const DateInputProps = _extends({}, inputProps, other, {
    components,
    componentsProps,
    ref,
    validationError
  });
  return (0, import_jsx_runtime10.jsx)(MobileWrapper, _extends({}, other, wrapperProps, {
    DateInputProps,
    PureDateInputComponent: PureDateInput,
    components,
    componentsProps,
    children: (0, import_jsx_runtime10.jsx)(CalendarOrClockPicker, _extends({}, pickerProps, {
      autoFocus: true,
      toolbarTitle: props.label || props.toolbarTitle,
      ToolbarComponent,
      DateInputProps,
      components,
      componentsProps
    }, other))
  }));
});
true ? MobileDatePicker.propTypes = {
  acceptRegex: import_prop_types2.default.instanceOf(RegExp),
  autoFocus: import_prop_types2.default.bool,
  children: import_prop_types2.default.node,
  className: import_prop_types2.default.string,
  closeOnSelect: import_prop_types2.default.bool,
  components: import_prop_types2.default.object,
  componentsProps: import_prop_types2.default.object,
  dayOfWeekFormatter: import_prop_types2.default.func,
  defaultCalendarMonth: import_prop_types2.default.any,
  DialogProps: import_prop_types2.default.object,
  disabled: import_prop_types2.default.bool,
  disableFuture: import_prop_types2.default.bool,
  disableHighlightToday: import_prop_types2.default.bool,
  disableMaskedInput: import_prop_types2.default.bool,
  disableOpenPicker: import_prop_types2.default.bool,
  disablePast: import_prop_types2.default.bool,
  getOpenDialogAriaText: import_prop_types2.default.func,
  getViewSwitchingButtonText: import_prop_types2.default.func,
  ignoreInvalidInputs: import_prop_types2.default.bool,
  InputAdornmentProps: import_prop_types2.default.object,
  inputFormat: import_prop_types2.default.string,
  InputProps: import_prop_types2.default.object,
  inputRef: import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.shape({
    current: import_prop_types2.default.object
  })]),
  label: import_prop_types2.default.node,
  leftArrowButtonText: import_prop_types2.default.string,
  loading: import_prop_types2.default.bool,
  mask: import_prop_types2.default.string,
  maxDate: import_prop_types2.default.any,
  minDate: import_prop_types2.default.any,
  onAccept: import_prop_types2.default.func,
  onChange: import_prop_types2.default.func.isRequired,
  onClose: import_prop_types2.default.func,
  onError: import_prop_types2.default.func,
  onMonthChange: import_prop_types2.default.func,
  onOpen: import_prop_types2.default.func,
  onViewChange: import_prop_types2.default.func,
  onYearChange: import_prop_types2.default.func,
  open: import_prop_types2.default.bool,
  OpenPickerButtonProps: import_prop_types2.default.object,
  openTo: import_prop_types2.default.oneOf(["day", "month", "year"]),
  orientation: import_prop_types2.default.oneOf(["landscape", "portrait"]),
  readOnly: import_prop_types2.default.bool,
  reduceAnimations: import_prop_types2.default.bool,
  renderDay: import_prop_types2.default.func,
  renderInput: import_prop_types2.default.func.isRequired,
  renderLoading: import_prop_types2.default.func,
  rifmFormatter: import_prop_types2.default.func,
  rightArrowButtonText: import_prop_types2.default.string,
  shouldDisableDate: import_prop_types2.default.func,
  shouldDisableMonth: import_prop_types2.default.func,
  shouldDisableYear: import_prop_types2.default.func,
  showDaysOutsideCurrentMonth: import_prop_types2.default.bool,
  showToolbar: import_prop_types2.default.bool,
  ToolbarComponent: import_prop_types2.default.elementType,
  toolbarFormat: import_prop_types2.default.string,
  toolbarPlaceholder: import_prop_types2.default.node,
  toolbarTitle: import_prop_types2.default.node,
  value: import_prop_types2.default.any,
  views: import_prop_types2.default.arrayOf(import_prop_types2.default.oneOf(["day", "month", "year"]).isRequired)
} : void 0;

// node_modules/@mui/x-date-pickers/DatePicker/DatePicker.js
init_extends();
init_objectWithoutPropertiesLoose();
var React8 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var _excluded5 = ["desktopModeMediaQuery", "DialogProps", "PopperProps", "TransitionComponent"];
var DatePicker = React8.forwardRef(function DatePicker2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiDatePicker"
  });
  const {
    desktopModeMediaQuery = "@media (pointer: fine)",
    DialogProps,
    PopperProps,
    TransitionComponent
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded5);
  const isDesktop = useMediaQuery(desktopModeMediaQuery, {
    defaultMatches: true
  });
  if (isDesktop) {
    return (0, import_jsx_runtime11.jsx)(DesktopDatePicker, _extends({
      ref,
      PopperProps,
      TransitionComponent
    }, other));
  }
  return (0, import_jsx_runtime11.jsx)(MobileDatePicker, _extends({
    ref,
    DialogProps
  }, other));
});
true ? DatePicker.propTypes = {
  acceptRegex: import_prop_types3.default.instanceOf(RegExp),
  autoFocus: import_prop_types3.default.bool,
  children: import_prop_types3.default.node,
  className: import_prop_types3.default.string,
  closeOnSelect: import_prop_types3.default.bool,
  components: import_prop_types3.default.object,
  componentsProps: import_prop_types3.default.object,
  dayOfWeekFormatter: import_prop_types3.default.func,
  defaultCalendarMonth: import_prop_types3.default.any,
  desktopModeMediaQuery: import_prop_types3.default.string,
  DialogProps: import_prop_types3.default.object,
  disabled: import_prop_types3.default.bool,
  disableFuture: import_prop_types3.default.bool,
  disableHighlightToday: import_prop_types3.default.bool,
  disableMaskedInput: import_prop_types3.default.bool,
  disableOpenPicker: import_prop_types3.default.bool,
  disablePast: import_prop_types3.default.bool,
  getOpenDialogAriaText: import_prop_types3.default.func,
  getViewSwitchingButtonText: import_prop_types3.default.func,
  ignoreInvalidInputs: import_prop_types3.default.bool,
  InputAdornmentProps: import_prop_types3.default.object,
  inputFormat: import_prop_types3.default.string,
  InputProps: import_prop_types3.default.object,
  inputRef: import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.shape({
    current: import_prop_types3.default.object
  })]),
  label: import_prop_types3.default.node,
  leftArrowButtonText: import_prop_types3.default.string,
  loading: import_prop_types3.default.bool,
  mask: import_prop_types3.default.string,
  maxDate: import_prop_types3.default.any,
  minDate: import_prop_types3.default.any,
  onAccept: import_prop_types3.default.func,
  onChange: import_prop_types3.default.func.isRequired,
  onClose: import_prop_types3.default.func,
  onError: import_prop_types3.default.func,
  onMonthChange: import_prop_types3.default.func,
  onOpen: import_prop_types3.default.func,
  onViewChange: import_prop_types3.default.func,
  onYearChange: import_prop_types3.default.func,
  open: import_prop_types3.default.bool,
  OpenPickerButtonProps: import_prop_types3.default.object,
  openTo: import_prop_types3.default.oneOf(["day", "month", "year"]),
  orientation: import_prop_types3.default.oneOf(["landscape", "portrait"]),
  PaperProps: import_prop_types3.default.object,
  PopperProps: import_prop_types3.default.object,
  readOnly: import_prop_types3.default.bool,
  reduceAnimations: import_prop_types3.default.bool,
  renderDay: import_prop_types3.default.func,
  renderInput: import_prop_types3.default.func.isRequired,
  renderLoading: import_prop_types3.default.func,
  rifmFormatter: import_prop_types3.default.func,
  rightArrowButtonText: import_prop_types3.default.string,
  shouldDisableDate: import_prop_types3.default.func,
  shouldDisableMonth: import_prop_types3.default.func,
  shouldDisableYear: import_prop_types3.default.func,
  showDaysOutsideCurrentMonth: import_prop_types3.default.bool,
  showToolbar: import_prop_types3.default.bool,
  ToolbarComponent: import_prop_types3.default.elementType,
  toolbarFormat: import_prop_types3.default.string,
  toolbarPlaceholder: import_prop_types3.default.node,
  toolbarTitle: import_prop_types3.default.node,
  TransitionComponent: import_prop_types3.default.elementType,
  value: import_prop_types3.default.any,
  views: import_prop_types3.default.arrayOf(import_prop_types3.default.oneOf(["day", "month", "year"]).isRequired)
} : void 0;

export {
  DesktopWrapper,
  DesktopDatePicker,
  MobileWrapper,
  PureDateInput,
  MobileDatePicker,
  DatePicker
};
//# sourceMappingURL=chunk-ONOQA4FG.js.map
